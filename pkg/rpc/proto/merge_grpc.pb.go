// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/merge.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Merger_Merge_FullMethodName = "/proto.Merger/Merge"
)

// MergerClient is the client API for Merger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MergerClient interface {
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
}

type mergerClient struct {
	cc grpc.ClientConnInterface
}

func NewMergerClient(cc grpc.ClientConnInterface) MergerClient {
	return &mergerClient{cc}
}

func (c *mergerClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, Merger_Merge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MergerServer is the server API for Merger service.
// All implementations must embed UnimplementedMergerServer
// for forward compatibility
type MergerServer interface {
	Merge(context.Context, *MergeRequest) (*MergeResponse, error)
	mustEmbedUnimplementedMergerServer()
}

// UnimplementedMergerServer must be embedded to have forward compatible implementations.
type UnimplementedMergerServer struct {
}

func (UnimplementedMergerServer) Merge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedMergerServer) mustEmbedUnimplementedMergerServer() {}

// UnsafeMergerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MergerServer will
// result in compilation errors.
type UnsafeMergerServer interface {
	mustEmbedUnimplementedMergerServer()
}

func RegisterMergerServer(s grpc.ServiceRegistrar, srv MergerServer) {
	s.RegisterService(&Merger_ServiceDesc, srv)
}

func _Merger_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergerServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merger_Merge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergerServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Merger_ServiceDesc is the grpc.ServiceDesc for Merger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Merger",
	HandlerType: (*MergerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Merge",
			Handler:    _Merger_Merge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merge.proto",
}
